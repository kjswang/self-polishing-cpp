#include "sci_arma.h"


//fmin with linear constraints
//exterior-point
x_fval sci_arma::fmincon(const obj_fun& f, vec& x0, mat& A, mat& b, const options& opt)
{
	try {
		if ((int)x0.n_cols != 1)
			throw std::logic_error("ERROR: fmincon(): x0 must be a column vector.");
	}
	catch (std::exception& e) {
		std::cerr << e.what() << std::endl;
		std::terminate();
	}
	umat c = A * x0 - b <= zeros(A.n_rows, 1);
	int flag = 0;
	for (auto i = 0; i < A.n_rows; i++)
	{
		if (c(i, 0) == 0)
			flag++;
	}
	try {
		if (flag > 0)
			throw std::logic_error("ERROR: fmincon(): x0 does not meet inequality linear constraints.");
	}
	catch (std::exception& e) {
		std::cerr << e.what() << std::endl;
		std::terminate();
	}
	double delta = 1, C = 1.1, eps = opt.tolerance <= 0.0001 ? opt.tolerance : 0.0001;
	long long ite = 0;
	auto x_ = x0;
	auto P = [&](vec& x)->double {
		vec x1 = b - A * x;
		auto n_ineq = x1.n_rows;
		double B = 0;
		for (auto i = 0; i < n_ineq; i++)
		{
			double temp = std::max(0.0, -x1(i));
			B += temp * temp;
		}
		return delta * B;
	};
	while (true)
	{
		ite++;
		auto g = [&](vec& x)-> double {
			return f(x) + P(x);
		};
		x_fval result_;
		if (opt.algo == Powell)
		{
			result_ = powell(g, x_, opt);
		}
		else if (opt.algo == Rosenbrock)
		{
			result_ = rosenbrock(g, x_, opt);
		}
		else if (opt.algo == Powell_modified || opt.algo == preset || opt.algo == BFGS)
		{
			result_ = powell_m(g, x_, opt);
		}
		else if (opt.algo == Rosenbrock)
		{
			result_ = rosenbrock(g, x_, opt);
		}
		x_ = result_.x;
		if (P(x_) <= eps || ite >= opt.max_ite)
		{
			x_fval result;
			if (P(x_) > eps) {
				result.if_forced_terminated = true;
			}
			else {
				result.if_forced_terminated = false;
			}
			if (opt.algo == Powell)
			{
				result.algorithm = "exterior-point_Powell";
			}
			else if (opt.algo == Rosenbrock)
			{
				result.algorithm = "exterior-point_Rosenbrock";
			}
			else if (opt.algo == Powell_modified || opt.algo == preset || opt.algo == BFGS)
			{
				result.algorithm = "exterior-point_Powell_modified";
			}
			if (opt.algo == BFGS)
				result.warning = "BFGS is slow for constraint problems, changed with Powell_modified.";
			result.ite_times = ite;
			result.x = x_;
			result.fval = f(x_);
			return result;
		}
		else
		{
			delta *= C;
		}
	}
}


x_fval sci_arma::fmincon(const obj_fun& f, vec& x0, vec& lb, vec& ub, const options& opt)
{
	auto nvar = x0.n_rows;
	umat c1 = x0 <= ub;
	int flag = 0;
	for (auto i = 0; i < nvar; i++)
	{
		if (c1(i, 0) == 0)
			flag++;
	}
	try {
		if (flag > 0)
			throw std::logic_error("ERROR: fmincon(): x0 exceeds the upper bound.");
	}
	catch (std::exception& e) {
		std::cerr << e.what() << std::endl;
		std::terminate();
	}
	c1 = x0 >= lb;
	flag = 0;
	for (auto i = 0; i < nvar; i++)
	{
		if (c1(i, 0) == 0)
			flag++;
	}
	try {
		if (flag > 0)
			throw std::logic_error("ERROR: fmincon(): x0 falls beneath the lower bound.");
	}
	catch (std::exception& e) {
		std::cerr << e.what() << std::endl;
		std::terminate();
	}
	mat E1 = eye(nvar, nvar);
	mat E2 = -E1;
	vec b = join_cols(-lb, ub);
	mat A = join_cols(E2, E1);
	return fmincon(f, x0, A, b, opt);
}


x_fval sci_arma::fmincon(const obj_fun& f, vec& x0, mat& A, mat& b, vec& lb, vec& ub, const options& opt)
{
	auto nvar = x0.n_rows;
	umat c1 = x0 <= ub;
	int flag = 0;
	for (auto i = 0; i < nvar; i++)
	{
		if (c1(i, 0) == 0)
			flag++;
	}
	try {
		if (flag > 0)
			throw std::logic_error("ERROR: fmincon(): x0 exceeds the upper bound.");
	}
	catch (std::exception& e) {
		std::cerr << e.what() << std::endl;
		std::terminate();
	}
	c1 = x0 >= lb;
	flag = 0;
	for (auto i = 0; i < nvar; i++)
	{
		if (c1(i, 0) == 0)
			flag++;
	}
	try {
		if (flag > 0)
			throw std::logic_error("ERROR: fmincon(): x0 falls beneath the lower bound.");
	}
	catch (std::exception& e) {
		std::cerr << e.what() << std::endl;
		std::terminate();
	}
	mat E1 = eye(nvar, nvar);
	mat E2 = -E1;
	vec b_ = join_cols(-lb, ub);
	mat A_ = join_cols(E2, E1);
	A_ = join_cols(A_, A);
	b_ = join_cols(b_, b);
	return fmincon(f, x0, A_, b_, opt);
}


x_fval sci_arma::fmincon(const obj_fun& f, vec& x0, mat& A, mat& b, mat& Aeq, mat& beq, vec& lb, vec& ub, const options& opt)
{
	auto nvar = x0.n_rows;
	umat c1 = x0 <= ub;
	int flag = 0;
	for (auto i = 0; i < nvar; i++)
	{
		if (c1(i, 0) == 0)
			flag++;
	}
	try {
		if (flag > 0)
			throw std::logic_error("ERROR: fmincon(): x0 exceeds the upper bound.");
	}
	catch (std::exception& e) {
		std::cerr << e.what() << std::endl;
		std::terminate();
	}
	c1 = x0 >= lb;
	flag = 0;
	for (auto i = 0; i < nvar; i++)
	{
		if (c1(i, 0) == 0)
			flag++;
	}
	try {
		if (flag > 0)
			throw std::logic_error("ERROR: fmincon(): x0 falls beneath the lower bound.");
	}
	catch (std::exception& e) {
		std::cerr << e.what() << std::endl;
		std::terminate();
	}
	mat E1 = eye(nvar, nvar);
	mat E2 = -E1;
	vec b_ = join_cols(-lb, ub);
	mat A_ = join_cols(E2, E1);
	A_ = join_cols(A_, A);
	b_ = join_cols(b_, b);
	return fmincon(f, x0, A_, b_, Aeq, beq, opt);
}


x_fval sci_arma::fmincon(const obj_fun& f, vec& x0, mat& A, mat& b, mat& Aeq, mat& beq, vec& lb, vec& ub, const nonl_con& c, const options& opt)
{
	auto nvar = x0.n_rows;
	umat c1 = x0 <= ub;
	int flag = 0;
	for (auto i = 0; i < nvar; i++)
	{
		if (c1(i, 0) == 0)
			flag++;
	}
	try {
		if (flag > 0)
			throw std::logic_error("ERROR: fmincon(): x0 exceeds the upper bound.");
	}
	catch (std::exception& e) {
		std::cerr << e.what() << std::endl;
		std::terminate();
	}
	c1 = x0 >= lb;
	flag = 0;
	for (auto i = 0; i < nvar; i++)
	{
		if (c1(i, 0) == 0)
			flag++;
	}
	try {
		if (flag > 0)
			throw std::logic_error("ERROR: fmincon(): x0 falls beneath the lower bound.");
	}
	catch (std::exception& e) {
		std::cerr << e.what() << std::endl;
		std::terminate();
	}
	mat E1 = eye(nvar, nvar);
	mat E2 = -E1;
	vec b_ = join_cols(-lb, ub);
	mat A_ = join_cols(E2, E1);
	A_ = join_cols(A_, A);
	b_ = join_cols(b_, b);
	return fmincon(f, x0, A_, b_, Aeq, beq, c, opt);
}


x_fval sci_arma::fmincon(const obj_fun& f, vec& x0, mat& A, mat& b, mat& Aeq, mat& beq, const options& opt)
{
	try {
		if ((int)x0.n_cols != 1)
			throw std::logic_error("ERROR: fmincon(): x0 must be a column vector.");
	}
	catch (std::exception& e) {
		std::cerr << e.what() << std::endl;
		std::terminate();
	}
	umat c = A * x0 - b <= zeros(A.n_rows, 1);
	int flag = 0;
	for (auto i = 0; i < A.n_rows; i++)
	{
		if (c(i, 0) == 0)
			flag++;
	}
	try {
		if (flag > 0)
			throw std::logic_error("ERROR: fmincon(): x0 does not meet inequality linear constraints.");
	}
	catch (std::exception& e) {
		std::cerr << e.what() << std::endl;
		std::terminate();
	}
	c = Aeq * x0 - beq == zeros(Aeq.n_rows, 1);
	flag = 0;
	for (auto i = 0; i < Aeq.n_rows; i++)
	{
		if (c(i, 0) == 0)
			flag++;
	}
	try {
		if (flag > 0)
			throw std::logic_error("ERROR: fmincon(): x0 does not meet equality linear constraints.");
	}
	catch (std::exception& e) {
		std::cerr << e.what() << std::endl;
		std::terminate();
	}
	double delta = 1, C = 1.1, eps = opt.tolerance <= 0.0001 ? opt.tolerance : 0.0001;
	long long ite = 0;
	auto x_ = x0;
	auto P = [&](vec& x)->double {
		vec x1 = b - A * x, x2 = beq - Aeq * x;
		auto n_ineq = x1.n_rows;
		auto n_eq = x2.n_rows;
		double B = 0;
		for (auto i = 0; i < n_ineq; i++)
		{
			double temp = std::max(0.0, -x1(i));
			B += temp * temp;
		}
		for (auto i = 0; i < n_eq; i++)
		{
			B += x2(i) * x2(i);
		}
		return delta * B;
	};
	while (true)
	{
		ite++;
		auto g = [&](vec& x)-> double {
			return f(x) + P(x);
		};
		x_fval result_;
		if (opt.algo == Powell)
		{
			result_ = powell(g, x_, opt);
		}
		else if (opt.algo == Rosenbrock)
		{
			result_ = rosenbrock(g, x_, opt);
		}
		else if (opt.algo == Powell_modified || opt.algo == preset || opt.algo == BFGS)
		{
			result_ = powell_m(g, x_, opt);
		}
		x_ = result_.x;
		if (P(x_) <= eps || ite >= opt.max_ite)
		{
			x_fval result;
			if (P(x_) > eps) {
				result.if_forced_terminated = true;
			}
			else {
				result.if_forced_terminated = false;
			}
			if (opt.algo == Powell)
			{
				result.algorithm = "exterior-point_Powell";
			}
			else if (opt.algo == Rosenbrock)
			{
				result.algorithm = "exterior-point_Rosenbrock";
			}
			else if (opt.algo == Powell_modified || opt.algo == preset || opt.algo == BFGS)
			{
				result.algorithm = "exterior-point_Powell_modified";
			}
			if (opt.algo == BFGS)
				result.warning = "BFGS is slow for constraint problems, changed with Powell_modified.";
			result.ite_times = ite;
			result.x = x_;
			result.fval = f(x_);
			return result;
		}
		else
		{
			delta *= C;
		}
	}
}


x_fval sci_arma::fmincon(const obj_fun& f, vec& x0, mat& A, mat& b, mat& Aeq, mat& beq, const nonl_con& c, const options& opt)
{
	try {
		if ((int)x0.n_cols != 1)
			throw std::logic_error("ERROR: fmincon(): x0 must be a column vector.");
	}
	catch (std::exception& e) {
		std::cerr << e.what() << std::endl;
		std::terminate();
	}
	umat com = A * x0 - b <= zeros(A.n_rows, 1);
	int flag = 0;
	for (auto i = 0; i < A.n_rows; i++)
	{
		if (com(i, 0) == 0)
			flag++;
	}
	try {
		if (flag > 0)
			throw std::logic_error("ERROR: fmincon(): x0 does not meet inequality linear constraints.");
	}
	catch (std::exception& e) {
		std::cerr << e.what() << std::endl;
		std::terminate();
	}
	com = Aeq * x0 - beq == zeros(Aeq.n_rows, 1);
	flag = 0;
	for (auto i = 0; i < Aeq.n_rows; i++)
	{
		if (com(i, 0) == 0)
			flag++;
	}
	try {
		if (flag > 0)
			throw std::logic_error("ERROR: fmincon(): x0 does not meet equality liear constraints.");
	}
	catch (std::exception& e) {
		std::cerr << e.what() << std::endl;
		std::terminate();
	}
	double delta = 1, C = 1.1, eps = opt.tolerance <= 0.0001 ? opt.tolerance : 0.0001;
	long long ite = 0;
	auto x_ = x0;
	auto P = [&](vec& x)->double {
		vec x1 = b - A * x, x2 = beq - Aeq * x, x3 = c(x);
		auto n_ineq = x1.n_rows;
		auto n_eq = x2.n_rows;
		auto n_non_lin = x3.n_rows;
		double B = 0;
		for (auto i = 0; i < n_ineq; i++)
		{
			double temp = std::max(0.0, -x1(i));
			B += temp * temp;
		}
		for (auto i = 0; i < n_eq; i++)
		{
			B += x2(i) * x2(i);
		}
		for (auto i = 0; i < n_non_lin; i++)
		{
			double temp = std::max(0.0, x3(i));
			B += temp * temp;
		}
		return delta * B;
	};
	while (true)
	{
		ite++;
		auto g = [&](vec& x)-> double {
			return f(x) + P(x);
		};
		x_fval result_;
		if (opt.algo == Powell)
		{
			result_ = powell(g, x_, opt);
		}
		else if (opt.algo == Rosenbrock)
		{
			result_ = rosenbrock(g, x_, opt);
		}
		else if (opt.algo == Powell_modified || opt.algo == preset || opt.algo == BFGS)
		{
			result_ = powell_m(g, x_, opt);
		}
		x_ = result_.x;
		if (P(x_) <= eps || ite >= opt.max_ite)
		{
			x_fval result;
			if (P(x_) > eps) {
				result.if_forced_terminated = true;
			}
			else {
				result.if_forced_terminated = false;
			}
			if (opt.algo == Powell)
			{
				result.algorithm = "exterior-point_Powell";
			}
			else if (opt.algo == Rosenbrock)
			{
				result.algorithm = "exterior-point_Rosenbrock";
			}
			else if (opt.algo == Powell_modified || opt.algo == preset || opt.algo == BFGS)
			{
				result.algorithm = "exterior-point_Powell_modified";
			}
			else if (opt.algo == BFGS)
			{
				result.algorithm = "exterior-point_BFGS";
			}
			if (opt.algo == BFGS)
				result.warning = "BFGS is slow for constraint problems, changed with Powell_modified.";
			result.ite_times = ite;
			result.x = x_;
			result.fval = f(x_);
			return result;
		}
		else
		{
			delta *= C;
		}
	}
}


x_fval sci_arma::fmincon(const obj_fun& f, vec& x0, const options& opt)
{
	if (opt.algo == Rosenbrock)
	{
		return rosenbrock(f, x0, opt);
	}
	else if (opt.algo == Powell)
	{
		return powell(f, x0, opt);
	}
	else if (opt.algo == Powell_modified)
	{
		return powell_m(f, x0, opt);
	}
	else if (opt.algo == BFGS || opt.algo == preset)
	{
		return bfgs(f, x0, opt);
	}
}


x_fval sci_arma::fmincon(const obj_fun& f, vec& x0)
{
	options opt;
	return fmincon(f, x0, opt);
}


x_fval sci_arma::fmincon(const obj_fun& f, vec& x0, vec& lb, vec& ub)
{
	options opt;
	return fmincon(f, x0, lb, ub, opt);
}


x_fval sci_arma::fmincon(const obj_fun& f, vec& x0, mat& A, mat& b)
{
	options opt;
	return fmincon(f, x0, A, b, opt);
}


x_fval sci_arma::fmincon(const obj_fun& f, vec& x0, mat& A, mat& b, vec& lb, vec& ub)
{
	options opt;
	return fmincon(f, x0, A, b, lb, ub, opt);
}


x_fval sci_arma::fmincon(const obj_fun& f, vec& x0, mat& A, mat& b, mat& Aeq, mat& beq)
{
	options opt;
	return fmincon(f, x0, A, b, Aeq, beq, opt);
}


x_fval sci_arma::fmincon(const obj_fun& f, vec& x0, mat& A, mat& b, mat& Aeq, mat& beq, vec& lb, vec& ub)
{
	options opt;
	return fmincon(f, x0, A, b, Aeq, beq, lb, ub, opt);
}


x_fval sci_arma::fmincon(const obj_fun& f, vec& x0, mat& A, mat& b, mat& Aeq, mat& beq, const nonl_con& c)
{
	options opt;
	return fmincon(f, x0, A, b, Aeq, beq, c, opt);
}


x_fval sci_arma::fmincon(const obj_fun& f, vec& x0, mat& A, mat& b, mat& Aeq, mat& beq, vec& lb, vec& ub, const nonl_con& c)
{
	options opt;
	return fmincon(f, x0, A, b, Aeq, beq, lb, ub, c, opt);
}


//fmin with linear constraints
//'interior-point'
//this method is not well-implemented
/*
x_fval sci_arma::fmincon_i(const obj_fun &f, vec &x0, mat &A, mat &b)
{
	auto nvar=x0.n_rows;
	try{
		if((int)x0.n_cols!=1)
			throw std::logic_error("ERROR: x0 must be a column vector.");
	}
	catch(std::exception& e){
		std::cerr<<e.what()<<std::endl;
		std::terminate();
	}
	umat c=A*x0-b < zeros(nvar,1);
	int flag=0;
	for(auto i=0;i<nvar;i++)
	{
		if(c(i,0)==0)
			flag++;
	}
	try{
		if(flag>0)
			throw std::logic_error("ERROR: x0 is not in constraints, or on the boundary.");
	}
	catch(std::exception& e){
		std::cerr<<e.what()<<std::endl;
		std::terminate();
	}
	double r=1, beta=0.9, eps=0.0001;
	auto x_=x0;
	while (true)
	{
		auto g=[&](vec& x)-> double {
			return f(x)+r*std::abs(sum(ones(nvar,1)/(b-A*x)));
		};
		auto result_=fmin(g,x_);
		x_=result_.x;
		double temp=sum(ones(nvar,1)/(b-A*x_));
		if(r*std::abs(temp)<eps)
		{
			x_fval result;
			result.x=x_;
			result.fval=f(x_);
			return result;
		}
		else
		{
			r=beta*r;
		}
	}
}
*/